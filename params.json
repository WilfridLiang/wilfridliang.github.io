{"name":"Wilfridliang Blog","tagline":"I love everyday!","body":"# Windows和Linux下TXT排版转换\r\n\r\n最近因为学校作业的关系，要求交代码。\r\n\r\n我是习惯在Linux下打代码的，但这样的话，问题就来了，Linux下的源文件拿到Windows下打开的话，整个文件的排版就完全乱了。\r\n\r\n我是要交给老师的，我也不知道老师是不是用的Linux系统。所以我打算写一个转换格式软件用来转换格式(其实也不算是转换格式，就是让排版可以正常显示)。\r\n\r\n要做这样的一个软件，首先要明白Linux和Windows下TXT排版的区别。\r\n\r\n它们的区别主要是行结束标志的区别，即EOL(end of line)，Windows下TXT是用\"\\r\\n\"两个字符来标记一行的结束的，而Linux则是用\"\\n\"一个字符，没有\"\\r\"。至于为什么有这种区别，就要追溯到打字机的年代了，这里不详细说明。\r\n\r\n知道它们的区别之后，就可很简单的写出转换软件了。\r\n\r\nWindows下的TXT文件把所有的\"\\r\\n\"中的\"\\r\"删除，就可以在Linux下正常显示了。\r\n\r\nLinux的TXT文件则是在所有的\"\\n\"之前加入\"\\r\"。\r\n\r\n下面给出代码\r\n\r\n\t#include <stdio.h>\r\n\r\n\tint formatted_to_linux(char file_name[]);\r\n\r\n\tint formatted_to_windows(char file_name[]);\r\n\r\n\tint\r\n\tmain(int argc, char **argv)\r\n\t{\r\n\t\tint select = 0;\t//windows format to linux or contract.\r\n\t\tchar file_name[20] = \"\\0\";\r\n\r\n\t\t//Remark\r\n\t\tprintf(\"To change the text file from windows format to linux format,\"\r\n\t\t\t\" select 0, from linux to windows, please select 1\\n\"\r\n\t\t\t\"The result saves as Done.txt in current file.\\n\");\r\n\t\tprintf(\"Pleast input the file name: \");\r\n\t\tscanf(\"%s\", file_name);\r\n\t\tprintf(\"Please select the format(0/1): \");\r\n\t\tscanf(\"%d\", &select);\r\n\t\t//If it is not zero or one, it errors.\r\n\t\tif (select < 0 || select > 1){\r\n\t\t\tprintf(\"Error!\\n\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t//Returns -1 which means error, than outputs error message.\r\n\t\tif ((select == 0) ?\r\n\t\t     formatted_to_linux(file_name) : formatted_to_windows(file_name)){\r\n\t\t\tprintf(\"Error!\\n\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tprintf(\"Done!\\n\");\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tint\r\n\tformatted_to_linux(char file_name[]){\r\n\t\tchar char_one = '0', char_two = '0';\r\n\t\tFILE *in_ptr = NULL, *out_ptr = NULL;\r\n\r\n\t\t//Open files, the result is in Done.txt.\r\n\t\tin_ptr = fopen(file_name, \"rt\");\r\n\t\tout_ptr = fopen(\"Done.txt\", \"wt\");\r\n\t\tdo{\r\n\t\t\tchar_one = fgetc(in_ptr);\t//Get a character\r\n\t\t\t//The character is not '\\r', it goes to else statement to print it.\r\n\t\t\tif (char_one == '\\r'){\r\n\t\t\t\t//Checks the next character, if it is '\\n', prints a '\\n' instead of \"\\r\\n\".\r\n\t\t\t\tchar_two = fgetc(in_ptr);\r\n\t\t\t\tif (char_two == '\\n'){\r\n\t\t\t\t\tfprintf(out_ptr, \"%c\", '\\n');\r\n\t\t\t\t}\r\n\t\t\t\telse {\t//If the next character is not '\\n', prints both of them.\r\n\t\t\t\t\tfprintf(out_ptr, \"%c%c\", char_one, char_two);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfprintf(out_ptr, \"%c\", char_one);\r\n\t\t\t}\r\n\t\t}while (char_one != EOF && char_two != EOF);\r\n\t\t//All have done, closes files.\r\n\t\tfclose(in_ptr);\r\n\t\tfclose(out_ptr);\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tint\r\n\tformatted_to_windows(char file_name[])\r\n\t{\r\n\t\tchar char_one = '\\0';\r\n\t\tFILE *in_ptr = NULL, *out_ptr = NULL;\r\n\r\n\t\t//Open files\r\n\t\tin_ptr = fopen(file_name, \"rt\");\r\n\t\tout_ptr = fopen(\"Done.txt\", \"wt\");\r\n\t\tdo {\r\n\t\t\tchar_one = fgetc(in_ptr);\t//Get a character.\r\n\t\t\tif (char_one == '\\n'){\t//If it is a '\\n', puts a '\\r' before it.\r\n\t\t\t\tfprintf(out_ptr, \"%c%c\", '\\r', char_one);\r\n\t\t\t}\r\n\t\t\telse {\t//If it isn't, prints it only.\r\n\t\t\t\tfprintf(out_ptr, \"%c\", char_one);\r\n\t\t\t}\r\n\t\t}while (char_one != EOF);\r\n\t\t//All have done, closes files.\r\n\t\tfclose(in_ptr);\r\n\t\tfclose(out_ptr);\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}